type: edu
custom_name: stage5
files:
- name: test/GameOfLifeTest.java
  visible: false
  text: |2-

    import common.GameOfLifeStage5Test;

    public class GameOfLifeTest extends GameOfLifeStage5Test {

    }
  learner_created: false
- name: test/common/CheckResultUtil.kt
  visible: false
  text: |
    package common


    import org.hyperskill.hstest.v6.testcase.CheckResult

    operator fun CheckResult.component1(): Boolean = isCorrect
    operator fun CheckResult.component2(): String? = feedback

    fun Boolean.toCheckResult() = CheckResult(this, null)

    fun fail(message: String) = CheckResult(false, message)  // TODO: add to repo
  learner_created: false
- name: test/common/ClueWithChecker.kt
  visible: false
  text: |
    package common


    import org.hyperskill.hstest.v6.testcase.CheckResult
    import org.hyperskill.hstest.v6.testcase.TestCase

    sealed class ClueWithChecker(val input: String) {
        fun toTestCase(): TestCase<ClueWithChecker> {
            return TestCase<ClueWithChecker>().setInput(input).setAttach(this)
        }
    }

    class ClueWithPredefinedFeedbackChecker(
            val predefinedFeedback: String,
            input: String,
            val checker: (String) -> Boolean
    ) : ClueWithChecker(input)

    class ClueWithDynamicFeedbackChecker(
            input: String,
            val checker: (String) -> CheckResult
    ) : ClueWithChecker(input)

    fun createPredefinedFeedbackTest(
            feedback: String,
            input: String = "",
            checker: (String) -> Boolean
    ): TestCase<ClueWithChecker> {
        return ClueWithPredefinedFeedbackChecker(
                predefinedFeedback = feedback,
                input = input,
                checker = checker
        ).toTestCase()
    }

    fun createDynamicFeedbackTest(input: String = "", checker: (String) -> CheckResult): TestCase<ClueWithChecker> {
        return ClueWithDynamicFeedbackChecker(
                input = input,
                checker = checker
        ).toTestCase()
    }

    fun checkClueWithCheckerTest(reply: String, clue: ClueWithChecker): CheckResult {
        return try {
            when (clue) {
                is ClueWithDynamicFeedbackChecker -> clue.checker(reply)
                is ClueWithPredefinedFeedbackChecker -> CheckResult(clue.checker(reply), clue.predefinedFeedback)
            }
        } catch (e: AssertionError) {
            if (clue is ClueWithPredefinedFeedbackChecker) {
                fail(clue.predefinedFeedback)
            } else {
                CheckResult.FALSE
            }
        }
    }
  learner_created: false
- name: test/common/GameOfLifeCommonTest.kt
  visible: false
  text: |
    package common


    import org.assertj.swing.fixture.JLabelFixture
    import org.hyperskill.hstest.v6.testcase.CheckResult

    fun checkLabelForInteger(labelRequirements: ComponentRequirements<JLabelFixture>): CheckResult {
        val label = labelRequirements.requireExistingComponent()

        val labelDigits = label.text().trim { !it.isDigit() }

        if (labelDigits.toIntOrNull() == null) {
            return fail("The '${labelRequirements.name}' label doesn't contain an integer.")
        }

        return CheckResult.TRUE
    }
  learner_created: false
- name: test/common/GameOfLifeStage4Test.kt
  visible: false
  text: |
    package common


    import org.assertj.swing.fixture.JLabelFixture
    import org.hyperskill.hstest.v6.stage.SwingTest
    import org.hyperskill.hstest.v6.testcase.CheckResult
    import org.hyperskill.hstest.v6.testcase.TestCase
    import life.GameOfLife

    abstract class GameOfLifeStage4Test : SwingTest<ClueWithChecker>(GameOfLife()) {

        override fun generate(): List<TestCase<ClueWithChecker>> {
            val generationLabel = ComponentRequirements("GenerationLabel", isEnabled = true) { window.label(it) }
            val aliveLabel = ComponentRequirements("AliveLabel", isEnabled = true) { window.label(it) }

            return frameTests(::frame) +
                    existenceTests(generationLabel, aliveLabel) +
                    componentsAreEnabledTests(generationLabel, aliveLabel) +
                    stage4Tests(
                            generationLabelRequirements = generationLabel,
                            aliveLabelRequirements = aliveLabel
                    )
        }

        override fun check(reply: String, clue: ClueWithChecker): CheckResult {
            return checkClueWithCheckerTest(reply = reply, clue = clue)
        }
    }

    fun stage4Tests(
            generationLabelRequirements: ComponentRequirements<JLabelFixture>,
            aliveLabelRequirements: ComponentRequirements<JLabelFixture>
    ): List<TestCase<ClueWithChecker>> {
        return listOf(
                createDynamicFeedbackTest {
                    with(checkLabelForInteger(generationLabelRequirements)) {
                        if (!this.isCorrect) {
                            return@createDynamicFeedbackTest this
                        }
                    }
                    with(checkLabelForInteger(aliveLabelRequirements)) {
                        if (!this.isCorrect) {
                            return@createDynamicFeedbackTest this
                        }
                    }

                    return@createDynamicFeedbackTest CheckResult.TRUE
                }
        )
    }
  learner_created: false
- name: test/common/GameOfLifeStage5Test.kt
  visible: false
  text: |
    package common


    import org.assertj.swing.fixture.JButtonFixture
    import org.assertj.swing.fixture.JLabelFixture
    import org.assertj.swing.fixture.JToggleButtonFixture
    import org.hyperskill.hstest.v6.common.Utils
    import org.hyperskill.hstest.v6.stage.SwingTest
    import org.hyperskill.hstest.v6.testcase.CheckResult
    import org.hyperskill.hstest.v6.testcase.TestCase
    import life.GameOfLife

    abstract class GameOfLifeStage5Test : SwingTest<ClueWithChecker>(GameOfLife()) {

        override fun generate(): List<TestCase<ClueWithChecker>> {
            val generationLabel = ComponentRequirements("GenerationLabel", isEnabled = true) { window.label(it) }
            val aliveLabel = ComponentRequirements("AliveLabel", isEnabled = true) { window.label(it) }

            val playButton = ComponentRequirements("PlayToggleButton", isEnabled = true) { window.toggleButton(it) }
            val resetButton = ComponentRequirements("ResetButton", isEnabled = true) { window.button(it) }

            return frameTests(::frame) +
                    existenceTests(generationLabel, aliveLabel, playButton, resetButton) +
                    componentsAreEnabledTests(generationLabel, aliveLabel, playButton, resetButton) +
                    stage5Tests(
                            generationLabelRequirements = generationLabel,
                            aliveLabelRequirements = aliveLabel,
                            playButtonRequirements = playButton,
                            resetButtonRequirements = resetButton
                    )
        }

        override fun check(reply: String, clue: ClueWithChecker): CheckResult {
            return checkClueWithCheckerTest(reply = reply, clue = clue)
        }
    }

    fun stage5Tests(
            generationLabelRequirements: ComponentRequirements<JLabelFixture>,
            aliveLabelRequirements: ComponentRequirements<JLabelFixture>,
            playButtonRequirements: ComponentRequirements<JToggleButtonFixture>,
            resetButtonRequirements: ComponentRequirements<JButtonFixture>
    ): List<TestCase<ClueWithChecker>> {
        return listOf(
                createPredefinedFeedbackTest("App crashes when reset is clicked") {
                    val resetButton = resetButtonRequirements.requireExistingComponent()

                    resetButton.click()

                    return@createPredefinedFeedbackTest true
                },

                createDynamicFeedbackTest {
                    /*
                    Flip-flop play button, check labels, reset, flip-flop again, check again
                    */

                    val playButton = playButtonRequirements.requireExistingComponent()

                    playButton.check()
                    Utils.sleep(100)
                    playButton.uncheck()

                    with(checkLabelForInteger(generationLabelRequirements)) {
                        if (!this.isCorrect) {
                            return@createDynamicFeedbackTest this
                        }
                    }
                    with(checkLabelForInteger(aliveLabelRequirements)) {
                        if (!this.isCorrect) {
                            return@createDynamicFeedbackTest this
                        }
                    }

                    val resetButton = resetButtonRequirements.requireExistingComponent()
                    resetButton.click()

                    Utils.sleep(100)

                    playButton.check()
                    Utils.sleep(100)
                    playButton.uncheck()

                    with(checkLabelForInteger(generationLabelRequirements)) {
                        if (!this.isCorrect) {
                            return@createDynamicFeedbackTest this
                        }
                    }
                    with(checkLabelForInteger(aliveLabelRequirements)) {
                        if (!this.isCorrect) {
                            return@createDynamicFeedbackTest this
                        }
                    }

                    return@createDynamicFeedbackTest CheckResult.TRUE
                }
        )
    }
  learner_created: false
- name: test/common/UiTestsGenerators.kt
  visible: false
  text: |
    package common


    import org.assertj.swing.fixture.AbstractJComponentFixture
    import org.hyperskill.hstest.v6.stage.SwingTest
    import org.hyperskill.hstest.v6.testcase.TestCase
    import javax.swing.JFrame

    fun frameTests(frameGetter: () -> JFrame): List<TestCase<ClueWithChecker>> {
        return listOf(
                createPredefinedFeedbackTest("Window is not visible") { frameGetter().isVisible }
        )
    }

    class ComponentRequirements<ComponentType : AbstractJComponentFixture<*, *, *>>(
            val name: String,
            val isEnabled: Boolean,
            private val componentFinder: (String) -> ComponentType?
    ) {
        val suitableComponent: ComponentType? by lazy { componentFinder(name) }
    }

    fun existenceTests(vararg components: ComponentRequirements<*>): List<TestCase<ClueWithChecker>> {
        fun generateExistenceTest(requirements: ComponentRequirements<*>): TestCase<ClueWithChecker> {
            return createPredefinedFeedbackTest("No suitable component with name '${requirements.name}' is found") {
                SwingTest.checkExistence { requirements.suitableComponent }
            }
        }

        return components.map(::generateExistenceTest)
    }

    fun componentsAreEnabledTests(vararg components: ComponentRequirements<*>): List<TestCase<ClueWithChecker>> {
        fun generateIsEnabledTest(requirements: ComponentRequirements<*>): TestCase<ClueWithChecker> {
            val (desiredState, stateChecker) = if (requirements.isEnabled) {
                "enabled" to { requirements.requireExistingComponent().isEnabled }
            } else {
                "disabled" to { !requirements.requireExistingComponent().isEnabled }
            }

            return createPredefinedFeedbackTest("The '${requirements.name}' component should be $desiredState") {
                stateChecker()
            }

        }

        return components.map(::generateIsEnabledTest)
    }

    fun <ComponentType : AbstractJComponentFixture<*, *, *>>
            ComponentRequirements<ComponentType>.requireExistingComponent(): ComponentType {
        return requireNotNull(this.suitableComponent) {
            "Must check for the '${this.name}' component existence before this test"
        }
    }
  learner_created: false
- name: src/life/Main.java
  visible: true
  text: |
    package life;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: src/life/GameOfLifeModel.java
  visible: true
  text: |
    package life;

    import java.util.Random;

    public class GameOfLifeModel {
        private boolean[][] universe;
        private int generation = 1;
        final static int MIN_NEIGHBOURS = 2;
        final static int MAX_NEIGHBOURS = 3;
        final static int REBORN_NEIGHBOURS = 3;


        public GameOfLifeModel(){
            this(20);
        }

        public GameOfLifeModel(int size) { this(size, 0); }

        public GameOfLifeModel(int size, int seed){
            this(size, seed, 0);
        }

        public GameOfLifeModel(int size, int seed, int evolutions) {
            Random random = seed == 0 ? new Random() : new Random(seed);
            boolean[][] universe = new boolean[size][size];
            for (int i = 0; i < size; i++) {
                for (int j = 0; j < size; j++) {
                    universe[i][j] = random.nextBoolean();
                }
            }
            this.universe = universe;
            for (int i = 0; i < evolutions; i++) {
                evolve();
            }
        }

        public int getAlive(){
            int alive = 0;
            for (boolean[] line : universe) {
                for (boolean cell : line) {
                    alive += cell ? 1 : 0;
                }
            }
            return alive;
        }

        public boolean[][] getUniverse() {
            return universe;
        }

        public void setUniverse(boolean[][] universe) {
            this.universe = universe;
        }

        public int getGeneration(){
            return generation;
        }

        public void printUniverse() {
            System.out.println("Generation: #" + generation);
            System.out.println("Alive: " + getAlive());
            for (boolean[] line : universe) {
                StringBuilder builder = new StringBuilder();
                for (boolean cell : line) {
                    builder.append(cell ? "O" : " ");
                }
                System.out.println(builder.toString());
            }
        }

        void evolve() {
            boolean[][] parent = universe;
            int[][] neighbours = getNeighbours(parent);
            boolean[][] child = new boolean[parent.length][parent.length];
            for (int i = 0; i < neighbours.length; i++) {
                for (int j = 0; j < neighbours[i].length; j++) {
                    //If current cell is alive
                    if (parent[i][j]){
                        //An alive cell survives if has between min and max alive neighbors;
                        child[i][j] = neighbours[i][j] >= MIN_NEIGHBOURS && neighbours[i][j] <= MAX_NEIGHBOURS;
                    } else {
                        //A dead cell is reborn if it has exactly the specified number of alive neighbors
                        child[i][j] = neighbours[i][j] == REBORN_NEIGHBOURS;
                    }

                }
            }
            generation++;
            universe = child;
        }

        static int[][] getNeighbours (boolean[][] parent){

            int[][] result = new int[parent.length][parent.length];
            for (int i = 0; i < parent.length; i++) {
                for (int j = 0; j < parent[i].length; j++) {
                    int numberOfNeighbours = 0;
                    int l = parent.length;
                    numberOfNeighbours += parent[(i-1+l)%l][(j-1+l)%l] ? 1 : 0;
                    numberOfNeighbours += parent[(i-1+l)%l][j] ? 1 : 0;
                    numberOfNeighbours += parent[(i-1+l)%l][(j+1)%l] ? 1 : 0;
                    numberOfNeighbours += parent[i][(j-1+l)%l] ? 1 : 0;
                    numberOfNeighbours += parent[i][(j+1)%l] ? 1 : 0;
                    numberOfNeighbours += parent[(i+1)%l][(j-1+l)%l] ? 1 : 0;
                    numberOfNeighbours += parent[(i+1)%l][j] ? 1 : 0;
                    numberOfNeighbours += parent[(i+1)%l][(j+1)%l] ? 1 : 0;
                    result[i][j] = numberOfNeighbours;
                }
            }
            return result;
        }
    }
  learner_created: true
- name: src/life/GameOfLifeController.java
  visible: true
  text: |
    package life;

    public class GameOfLifeController extends Thread{

        private GameOfLifeView view;
        private GameOfLifeModel model;
        private int evolutions;
        private int size;

        public GameOfLifeController(GameOfLifeView view, int size, int evolutions){
            this.view = view;
            this.model = new GameOfLifeModel(size);
            this.evolutions = evolutions;
            setView();
        }

        public void run(){
            for (int i = 0; i < evolutions; i++) {
                try {
                    evolve();
                    Thread.sleep(200);
                }
                catch (InterruptedException e) {}
            }
        }

        public void evolve(){
            model.evolve();
            setView();
        }

        public void setView(){
            view.setGeneration(model.getGeneration());
            view.setAlive(model.getAlive());
            view.setUniverse(model.getUniverse());
        }
    }
  learner_created: true
- name: src/life/GameOfLife.java
  visible: true
  text: |-
    package life;

    import javax.swing.*;
    import java.awt.*;
    import java.util.Arrays;

    public class GameOfLifeView extends JFrame{

        final static int EVOLUTIONS = 50;
        private JLabel generationLabel = new JLabel();
        private JLabel aliveLabel = new JLabel();
        private JPanel[][] cells;

        public GameOfLifeView(){ this(20); }

        GameOfLifeView(int size){
            super("Game of Life");
            setSize(1000, 1000);

            //Statistics Panel for Generation and alive statistics
            JPanel statisticsPanel = new JPanel();
            statisticsPanel.setLayout(new BoxLayout(statisticsPanel, BoxLayout.Y_AXIS));
            generationLabel.setName("GenerationLabel");
            aliveLabel.setName("AliveLabel");
            statisticsPanel.add(generationLabel);
            statisticsPanel.add(aliveLabel);

            //Control Panel for buttons
            JPanel controlPanel = new JPanel();
            controlPanel.setLayout(new GridLayout(1, 2));
            controlPanel.setPreferredSize(new Dimension(100, 50));
            JToggleButton playPauseButton = new JToggleButton("Play");
            JButton resetButton = new JButton("reset");
            playPauseButton.setMaximumSize(new Dimension(40, 40));
            resetButton.setPreferredSize(new Dimension(40, 40));
            controlPanel.add(playPauseButton);
            controlPanel.add(resetButton);

            //Universe Panel to show the actual universe
            JPanel universePanel = new JPanel();
            universePanel.setLayout(new GridLayout(size, size));
            cells = new JPanel[size][size];
            for (int i = 0; i < cells.length; i++){
                for (int j = 0; j < cells[i].length; j++) {
                    JPanel cell = new JPanel();
                    cell.setBorder(BorderFactory.createLineBorder(Color.black));
                    universePanel.add(cell);
                    cells[i][j] = cell;
                }
            }

            //JFrame
            statisticsPanel.setAlignmentX(Component.LEFT_ALIGNMENT);
            controlPanel.setAlignmentX(Component.LEFT_ALIGNMENT);
            universePanel.setAlignmentX(Component.LEFT_ALIGNMENT);
            add(statisticsPanel);
            add(controlPanel);
            add(universePanel);
            setLayout(new BoxLayout(getContentPane(), BoxLayout.Y_AXIS));

            GameOfLifeController controller = new GameOfLifeController(this, size, EVOLUTIONS);
            setVisible(true);
            controller.start();
        }

        public void setUniverse(boolean[][] universe){
            System.out.println(Arrays.deepToString(universe));
            System.out.println(Arrays.deepToString(cells));
            for (int i = 0; i < universe.length; i++) {
                for (int j = 0; j < universe[i].length; j++) {
                    cells[i][j].setBackground(universe[i][j] ? Color.BLACK : null);
                }
            }
        }

        public void setGeneration(int generation){
            generationLabel.setText("Generation #" + generation);
        }

        public void setAlive(int alive){
            aliveLabel.setText("Alive: " + alive);
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/54/stages/299/implement
status: Solved
record: -1
